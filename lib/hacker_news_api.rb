# Generated by Sideko (sideko.dev)
# frozen_string_literal: true
require 'json'
require 'http'
require_relative 'schemas'

class RequestError < StandardError
  attr_reader :status_code, :method, :url, :data

  def initialize(status_code, method, url, message)
    @status_code = status_code
    @method = method
    @url = url
    begin
      @data = JSON.parse(message)
    rescue
      @data = message
    end

    super("received #{status_code} from #{method} #{url} with #{message}")
  end
end

class Client
  def initialize(base_url='https://hacker-news.firebaseio.com/v0')
    @_client = HTTP.persistent(nil)
    @_base_url = base_url
  end

  def _cast_array(input_array, target_class)
    casted = []
    input_array.each { |el|
      if el.class == Array
        casted.append(_cast_array(el, target_class))
      else
        casted.append(target_class.from_json!(JSON.generate(el)))
      end
    }
    casted
  end

  def get_ask_story_ids(print: nil)
    url = @_base_url + "/askstories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_best_story_ids(print: nil)
    url = @_base_url + "/beststories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_item(id:, print: nil)
    url = @_base_url + "/item/#{id}.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response = Item.from_dynamic!(response)
    response
  end

  def get_job_story_ids(print: nil)
    url = @_base_url + "/jobstories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_max_item_id(print: nil)
    url = @_base_url + "/maxitem.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_new_story_ids(print: nil)
    url = @_base_url + "/newstories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_show_story_ids(print: nil)
    url = @_base_url + "/showstories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_top_story_ids(print: nil)
    url = @_base_url + "/topstories.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response
  end

  def get_updates(print: nil)
    url = @_base_url + "/updates.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response = GetUpdatesJSONResponse.from_dynamic!(response)
    response
  end

  def get_user(id:, print: nil)
    url = @_base_url + "/user/#{id}.json"
    params = {}
    if print != nil
      params[:print] = print
    end

    
    response = @_client.get(
      url,
      :params => params,
      
    )
    if response.status.success?
      response = response.parse
    else
      raise RequestError.new(
        status_code=response.status,
        method="get",
        url=url,
        message=response.reason,
      )
    end

    response = User.from_dynamic!(response)
    response
  end


end